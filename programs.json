{
  "categories": [
    {
      "id": 1,
      "name": "DSA",
      "description": "Data Structure and Algorithms using C",
      "programs": [
        {
          "id": 1,
          "title": "Linear Search",
          "description": "Linear Search description",
          "content": "#include<stdio.h>\nvoid sequential_search(int a[],int n,int x)\n{\n    int i;\n    for(i=0;i<n;i++){\n        if(a[i]==x){\n            printf(\"Element found at index %d\",i);\n            return;\n        }\n    }\n    printf(\"Element not found\");\n}\nvoid main()\n{\n    int n,a[100],i,j,x,temp;\n    printf(\"Enter the number of elements in an array\\n\");\n    scanf(\"%d\",&n);\n    printf(\"Enter array elements\\n\");\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    \n    printf(\"Enter the element to be searched : \");\n    scanf(\"%d\",&x);\n    sequential_search(a,n,x);\n}",
          "created_at": null,
          "updated_at": null
        },
        {
          "id": 2,
          "title": "Binary Search",
          "description": "Binary Search description",
          "content": "#include<stdio.h>\nvoid binary_search(int a[],int l,int r,int x)\n{\n    int mid;\n    while(l<=r){\n        mid=(l+r)/2;\n        if(x==a[mid]){\n            printf(\"Element found at index %d\",mid);\n            return;\n        }\n        if(x<a[mid]){\n            r=mid-1;\n        }\n        else{\n            l=mid+1;\n        }\n    }\n    printf(\"Element not found\");\n}\nvoid main()\n{\n    int n,a[100],i,j,x,temp;\n    printf(\"Enter the number of elements in an array\\n\");\n    scanf(\"%d\",&n);\n    printf(\"Enter array elements\\n\");\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    \n    for(i=0;i<n-1;i++)          //sorting the array to perform binary search\n    {\n        for(j=0;j<n-i-1;j++)\n        {\n        if(a[j]>a[j+1])\n        {\n            temp=a[j];\n            a[j]=a[j+1];\n            a[j+1]=temp;\n            }\n        }\n    }\n    \n    for(i=0;i<n;i++)\n    {\n        printf(\"%d\\t\",a[i]);\n    }\n    \n    printf(\"Enter the element to be searched : \");\n    scanf(\"%d\",&x);\n    binary_search(a,0,n-1,x);\n}",
          "created_at": null,
          "updated_at": null
        },
        {
          "id": 3,
          "title": "Interpolation Search",
          "description": "Interpolation Search description",
          "content": "#include<stdio.h>\nvoid interpolation_search(int a[],int l,int r,int x)\n{\n    int mid;\n    while(l<=r){\n        mid=l+(r-l)*((x-a[l])/(a[r]-a[l]));\n        if(x==a[mid]){\n            printf(\"Element found at index %d\",mid);\n            return;\n        }\n        if(x<a[mid]){\n            r=mid-1;\n        }\n        else{\n            l=mid+1;\n        }\n    }\n    printf(\"Element not found\");\n}\nvoid main()\n{\n    int n,a[100],i,j,x,temp;\n    printf(\"Enter the number of elements in an array\\n\");\n    scanf(\"%d\",&n);\n    printf(\"Enter array elements\\n\");\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    \n    for(i=0;i<n-1;i++)          //sorting the array to perform the interpolation search\n    {\n        for(j=0;j<n-i-1;j++)\n        {\n        if(a[j]>a[j+1])\n        {\n            temp=a[j];\n            a[j]=a[j+1];\n            a[j+1]=temp;\n            }\n        }\n    }\n    \n    for(i=0;i<n;i++)\n    {\n        printf(\"%d\\t\",a[i]);\n    }\n    \n    printf(\"Enter the element to be searched : \");\n    scanf(\"%d\",&x);\n    interpolation_search(a,0,n-1,x);\n}",
          "created_at": null,
          "updated_at": null
        },
        {
          "id": 4,
          "title": "Bubble Sort",
          "description": "Bubble Sort description",
          "content": "",
          "created_at": null,
          "updated_at": null
        },
        {
          "id": 5,
          "title": "Insertion Sort",
          "description": "Insertion Sort description",
          "content": "",
          "created_at": null,
          "updated_at": null
        },
        {
          "id": 6,
          "title": "Selection Sort",
          "description": "Selection Sort description",
          "content": "",
          "created_at": null,
          "updated_at": null
        },
        {
          "id": 7,
          "title": "Shell Sort",
          "description": "Shell Sort description",
          "content": "",
          "created_at": null,
          "updated_at": null
        },
        {
          "id": 8,
          "title": "Merge Sort",
          "description": "Merge Sort description",
          "content": "",
          "created_at": null,
          "updated_at": null
        },
        {
          "id": 9,
          "title": "Quick Sort",
          "description": "Quick Sort description",
          "content": "",
          "created_at": null,
          "updated_at": null
        }
      ]
    }
  ]
}
